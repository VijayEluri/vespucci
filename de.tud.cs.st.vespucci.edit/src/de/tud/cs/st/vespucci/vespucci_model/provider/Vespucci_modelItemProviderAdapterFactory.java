/**
 *  License (BSD Style License):
 *   Copyright (c) 2011
 *   Software Engineering
 *   Department of Computer Science
 *   Technische Universität Darmstadt
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are met:
 * 
 *   - Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   - Neither the name of the Software Engineering Group or Technische 
 *     Universität Darmstadt nor the names of its contributors may be used to 
 *     endorse or promote products derived from this software without specific 
 *     prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 *   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 *
 * $Id$
 */
package de.tud.cs.st.vespucci.vespucci_model.provider;

import de.tud.cs.st.vespucci.vespucci_model.util.Vespucci_modelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Vespucci_modelItemProviderAdapterFactory extends Vespucci_modelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Vespucci_modelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.ShapesDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShapesDiagramItemProvider shapesDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.ShapesDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShapesDiagramAdapter() {
		if (shapesDiagramItemProvider == null) {
			shapesDiagramItemProvider = new ShapesDiagramItemProvider(this);
		}

		return shapesDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.Empty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyItemProvider emptyItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.Empty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyAdapter() {
		if (emptyItemProvider == null) {
			emptyItemProvider = new EmptyItemProvider(this);
		}

		return emptyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.Ensemble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnsembleItemProvider ensembleItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.Ensemble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnsembleAdapter() {
		if (ensembleItemProvider == null) {
			ensembleItemProvider = new EnsembleItemProvider(this);
		}

		return ensembleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.NotAllowed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotAllowedItemProvider notAllowedItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.NotAllowed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotAllowedAdapter() {
		if (notAllowedItemProvider == null) {
			notAllowedItemProvider = new NotAllowedItemProvider(this);
		}

		return notAllowedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.Outgoing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutgoingItemProvider outgoingItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.Outgoing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutgoingAdapter() {
		if (outgoingItemProvider == null) {
			outgoingItemProvider = new OutgoingItemProvider(this);
		}

		return outgoingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.Incoming} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncomingItemProvider incomingItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.Incoming}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncomingAdapter() {
		if (incomingItemProvider == null) {
			incomingItemProvider = new IncomingItemProvider(this);
		}

		return incomingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.InAndOut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InAndOutItemProvider inAndOutItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.InAndOut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInAndOutAdapter() {
		if (inAndOutItemProvider == null) {
			inAndOutItemProvider = new InAndOutItemProvider(this);
		}

		return inAndOutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.Expected} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpectedItemProvider expectedItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.Expected}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpectedAdapter() {
		if (expectedItemProvider == null) {
			expectedItemProvider = new ExpectedItemProvider(this);
		}

		return expectedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.GlobalOutgoing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalOutgoingItemProvider globalOutgoingItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.GlobalOutgoing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalOutgoingAdapter() {
		if (globalOutgoingItemProvider == null) {
			globalOutgoingItemProvider = new GlobalOutgoingItemProvider(this);
		}

		return globalOutgoingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.GlobalIncoming} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalIncomingItemProvider globalIncomingItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.GlobalIncoming}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalIncomingAdapter() {
		if (globalIncomingItemProvider == null) {
			globalIncomingItemProvider = new GlobalIncomingItemProvider(this);
		}

		return globalIncomingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tud.cs.st.vespucci.vespucci_model.Violation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViolationItemProvider violationItemProvider;

	/**
	 * This creates an adapter for a {@link de.tud.cs.st.vespucci.vespucci_model.Violation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViolationAdapter() {
		if (violationItemProvider == null) {
			violationItemProvider = new ViolationItemProvider(this);
		}

		return violationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (shapesDiagramItemProvider != null) shapesDiagramItemProvider.dispose();
		if (emptyItemProvider != null) emptyItemProvider.dispose();
		if (ensembleItemProvider != null) ensembleItemProvider.dispose();
		if (notAllowedItemProvider != null) notAllowedItemProvider.dispose();
		if (outgoingItemProvider != null) outgoingItemProvider.dispose();
		if (incomingItemProvider != null) incomingItemProvider.dispose();
		if (inAndOutItemProvider != null) inAndOutItemProvider.dispose();
		if (expectedItemProvider != null) expectedItemProvider.dispose();
		if (globalOutgoingItemProvider != null) globalOutgoingItemProvider.dispose();
		if (globalIncomingItemProvider != null) globalIncomingItemProvider.dispose();
		if (violationItemProvider != null) violationItemProvider.dispose();
	}

}
